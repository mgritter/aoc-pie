#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 90 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 67 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1544 0 28 3 9 #"#lang pie"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; If a == b, then tv else fv"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 13 #"if-equal-else"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"fv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 8 #"iee-base"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"fv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; This is a function that checks if b == 0"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; it should be used for a == 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"iee-base"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 2 #"fv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"which-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 2 #"tv"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-1"
0 0 24 3 2 #") "
0 0 14 3 2 #"fv"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 8 #"iee-step"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"fv"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; Given a value of a-1, and a function that checks"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; equality with a-1, produce a function that checks"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; equality with a."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"iee-step"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 2 #"fv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 9 #"check_a-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 9 #"which-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 2 #"fv"
0 0 24 3 2 #"  "
0 0 17 3 18 #";; b = 0 and a > 0"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-1"
0 0 24 3 2 #") "
0 0 17 3 18 #";; b > 0 and a > 0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"check_a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"if-equal-else"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 2 #"fv"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 7 #"ind-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"iee-base"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 2 #"fv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"iee-step"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"tv"
0 0 24 3 1 #" "
0 0 14 3 2 #"fv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; A StateMachine processes a Vec Int input, one number at a time."
0 0 24 29 1 #"\n"
0 0 17 3 75
(4
 #";; We need to identify the next state based on current state and the"
 #" input."
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(5
 #";; For that it will be helpful to have a table lookup--- an associat"
 #"ive array."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 16 #"AssociativeArray"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 3 #")) "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"AssociativeArray"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 6 #"Either"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 7 #"Trivial"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"contents"
0 0 24 3 2 #" ("
0 0 21 3 3 #"Vec"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 4 #"size"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"badminus1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"badminus1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 9 #"which-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 4 #"1000"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"n-1"
0 0 24 3 2 #") "
0 0 14 3 3 #"n-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 10 #"subtracter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"subtracter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"num-sub"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 8 #"iter-Nat"
0 0 24 3 1 #" "
0 0 14 3 7 #"num-sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 9 #"badminus1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Given an vector x1 x2 x3 x4"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; we want an vector with x1 (x2-x1-1) (x3-x2-1) (x4-x3-1)..."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 12 #"reduce-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 3 #"Vec"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 3 #"Vec"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 3 #"len"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"reduce-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 9 #"len-input"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 7 #"ind-Vec"
0 0 24 3 1 #" "
0 0 14 3 9 #"len-input"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 42 #";; Build functions which return the vector"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 33 #";; with the first element reduced"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 3 #"Vec"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 21 3 6 #"vecnil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #" "
0 0 14 3 11 #"vec-builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"subtrahend"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 21 3 5 #"vec::"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"subtracter"
0 0 24 3 1 #" "
0 0 14 3 10 #"subtrahend"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vec-builder"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 3 #"the"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 21 3 3 #"Vec"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 16 #"reduced-contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 7 #"ind-Vec"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 16 #"reduced-contents"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 21 3 5 #"right"
0 0 24 3 1 #" "
0 0 21 3 4 #"sole"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 74
(6
 #";; given a function that matches the tail of the vector, starting wi"
 #"th n-1"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 31 #";; check the head of the vector"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 65
#";; car p is how much to subtract, if zero then cdr p is the value"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #" "
0 0 14 3 9 #"remainder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 9 #"which-Nat"
0 0 24 3 2 #" ("
0 0 14 3 10 #"subtracter"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 30 #";; if zero, we found the index"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 6 #"Either"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 7 #"Trivial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 4 #"left"
0 0 24 3 2 #" ("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 42 #";; If nonzero, keep going with (car p) - n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 14 #";; NOT 1 less."
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"n-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"n-1"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"reduce-array"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        1891 21           0 0           0 314 0 24 3 1 #"("
0 0 14 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 11 #"ascii-array"
0 0 24 3 2 #" ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"ascii-array"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-array"
0 0 24 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"97"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 9 #")        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"99"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"102"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"103"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"104"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"105"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"106"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"j"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"107"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"108"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"109"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"111"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"o"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"112"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"113"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"114"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"116"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"117"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"118"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"119"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"121"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         ("
0 0 14 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"122"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 6 #"vecnil"
0 0 24 3 80
(7
 #"))))))))))))))))))))))))))))                                        "
 #"            "
) 0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 7 #"squares"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"squares"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-array"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 3 #") ("
0 0 21 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 21 3 3 #"289"
0 0 24 3 2 #") "
0 0 21 3 6 #"vecnil"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; States are Nats so we can use associative array"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Transition function for just one state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 18 #"TransitionFunction"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"TransitionFunction"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 12 #"StateMachine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"StateMachine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"AssociativeArray"
0 0 24 3 2 #" ("
0 0 14 3 18 #"TransitionFunction"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 8 #"state-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"State"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"state-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"car"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 7 #"Context"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 16 #"handle-one-input"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"input"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"handle-one-input"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 10 #"ind-Either"
0 0 24 3 3 #" (("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 3 #") ("
0 0 14 3 8 #"state-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 19 #"next-state-function"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 19 #"next-state-function"
0 0 24 3 2 #" ("
0 0 14 3 7 #"context"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #") "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 18 #";; state not found"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 7 #"machine"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Addition, from The Little Typer 3.24 through 3.27"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 6 #"step-+"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"step-+"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"iter-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"j"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"step-+"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Multiplication by 10"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 3 #"*10"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"*10"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"n5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"n5"
0 0 24 3 1 #" "
0 0 14 3 2 #"n5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"n2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 13 #"number-parser"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"number-parser"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-array"
0 0 24 3 2 #" ("
0 0 14 3 18 #"TransitionFunction"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 5 #"vec::"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"prev-number"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-digit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"*10"
0 0 24 3 1 #" "
0 0 14 3 11 #"prev-number"
0 0 24 3 2 #") "
0 0 14 3 10 #"next-digit"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 6 #"vecnil"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 12 #"handle-input"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"input"
0 0 24 3 2 #" ("
0 0 21 3 3 #"Vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"handle-input"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 2 #"in"
0 0 15 3 5 #"d-Vec"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 47 #";; continuation-passing style.  Do one iteraton"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 73
(8
 #";; of the state machine, then pass it to the function that does the "
 #"next."
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 3 #") ("
0 0 14 3 12 #"StateMachine"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 47 #";; Zero-length vector: return the final machine"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"final-machine"
0 0 24 3 2 #") "
0 0 14 3 13 #"final-machine"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 53 #";; Process input i, then pass it to the function that"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 28 #";; does the remaining steps."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-step"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prev-steps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"next-step"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 16 #"handle-one-input"
0 0 24 3 1 #" "
0 0 14 3 7 #"Context"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-steps"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
