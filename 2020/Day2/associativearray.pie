#lang pie

;;
;; If a == b, then tv else fv
(claim if-equal-else
  (Pi ((E U)
       (tv E)
       (fv E))
    (-> Nat Nat E)))

(claim iee-base
  (Pi ((E U)
       (tv E)
       (fv E))
    (-> Nat E)))

;; This is a function that checks if b == 0
;; it should be used for a == 0
(define iee-base
  (lambda (E tv fv)
    (lambda (b)
      (which-Nat b
        tv
        (lambda (b-1) fv)))))

(claim iee-step
  (Pi ((E U)
       (tv E)
       (fv E))
     (-> Nat (-> Nat E)
       (-> Nat E))))

;; Given a value of a-1, and a function that checks
;; equality with a-1, produce a function that checks
;; equality with a.
(define iee-step
  (lambda (E tv fv)
    (lambda (a-1 check_a-1)
      (lambda (b)
        (which-Nat b
          fv  ;; b = 0 and a > 0
          (lambda (b-1) ;; b > 0 and a > 0
            (check_a-1 b-1)))))))

(define if-equal-else
  (lambda (E tv fv a b)
    ((ind-Nat a
       (lambda (n) (-> Nat E))
       (iee-base E tv fv)
       (iee-step E tv fv))
      b)))

;; A StateMachine processes a Vec Int input, one number at a time.
;; We need to identify the next state based on current state and the input.
;; For that it will be helpful to have a table lookup--- an associative array.

(claim AssociativeArray
  (Pi ((E U)) U))

(define AssociativeArray
  (lambda (E)
    (-> Nat (Either E Trivial))))

(claim make-array
  (Pi ((E U)
       (size Nat) 
       (contents (Vec (Pair Nat E) size)))
    (AssociativeArray E)))

(claim badminus1
  (-> Nat Nat))

(define badminus1
  (lambda (n)
    (which-Nat n
      1000
      (lambda (n-1) n-1))))

(claim subtracter
  (-> Nat
      (-> Nat Nat)))

(define subtracter
  (lambda (num-sub)
    (lambda (n)
      (iter-Nat num-sub n badminus1))))

;; Given an vector x1 x2 x3 x4
;; we want an vector with x1 (x2-x1-1) (x3-x2-1) (x4-x3-1)...
(claim reduce-array
  (Pi ((E U)
       (len Nat))
    (->
     (Vec (Pair Nat E) len) 
     (Vec (Pair Nat E) len))))

(define reduce-array
  (lambda (E len-input input)
    ((ind-Vec len-input input
       ;; Build functions which return the vector
       ;; with the first element reduced
       (lambda (k v) (-> Nat (Vec (Pair Nat E) k)))
       (lambda (n) vecnil)
       (lambda (k e es vec-builder)
         (lambda (subtrahend)
           (vec::
             (cons
               (subtracter subtrahend (car e))
               (cdr e))
             (vec-builder (car e))))))
      zero)))

(define make-array
  (lambda (E size contents)
    ((the
       (-> (Vec (Pair Nat E) size)
         (AssociativeArray E))
       (lambda (reduced-contents)
         (ind-Vec size reduced-contents
           (lambda (k v) (AssociativeArray E))
           (lambda (n) (right sole))
           ;; given a function that matches the tail of the vector, starting with n-1
           ;; check the head of the vector
           ;; car p is how much to subtract, if zero then cdr p is the value
           (lambda (k p pairs remainder)
             (lambda (n)
               (which-Nat (subtracter (car p) n)
                 ;; if zero, we found the index
                 (the (Either E Trivial)
                   (left (cdr p)))
                 ;; If nonzero, keep going with (car p) - n
                 ;; NOT 1 less.
                 (lambda (n-1)
                   (remainder (add1 n-1)))))))))
      (reduce-array E size contents))))

(claim ascii-array (AssociativeArray Atom))

(define ascii-array
  (make-array Atom 26 
    (vec:: (cons 97 'a)
      (vec:: (cons 98 'b)        
        (vec:: (cons 99 'c)
          (vec:: (cons 100 'd)
            (vec:: (cons 101 'e)
              (vec:: (cons 102 'f)
                (vec:: (cons 103 'g)
                  (vec:: (cons 104 'h)
                    (vec:: (cons 105 'i)
                      (vec:: (cons 106 'j)
                        (vec:: (cons 107 'k)
                          (vec:: (cons 108 'l)
                            (vec:: (cons 109 'm)
                              (vec:: (cons 110 'n)
                                (vec:: (cons 111 'o)
                                  (vec:: (cons 112 'p)
                                    (vec:: (cons 113 'q)
                                      (vec:: (cons 114 'r)
                                        (vec:: (cons 115 's)
                                          (vec:: (cons 116 't)
                                            (vec:: (cons 117 'u)
                                              (vec:: (cons 118 'v)
                                                (vec:: (cons 119 'w)
                                                  (vec:: (cons 120 'x)
                                                     (vec:: (cons 121 'y)
                                                         (vec:: (cons 122 'z)
                                                           vecnil))))))))))))))))))))))))))))                                                    


(claim squares
  (AssociativeArray Nat))

(define squares
  (make-array Nat 2 (vec:: (cons 5 25) (vec:: (cons 17 289) vecnil))))
 
;; States are Nats so we can use associative array
(claim State U)
(define State Nat)

;; Transition function for just one state
(claim TransitionFunction
  (Pi ((Context U))
    U))

(define TransitionFunction
  (lambda (Context)
    (-> Context Nat (Pair State Context))))

(claim StateMachine
  (Pi ((Context U))
    U))

(define StateMachine
  (lambda (Context)
    (Pair
     (Pair State Context)
     (AssociativeArray (TransitionFunction Context)))))

(claim state-id
  (Pi ((Context U))
    (-> (StateMachine Context)
        State)))

(define state-id
  (lambda (Context m)
    (car (car m))))

(claim context
  (Pi ((Context U))
    (-> (StateMachine Context)
        Context)))

(define context
  (lambda (Context m)
    (cdr (car m))))

(claim handle-one-input
  (Pi ((Context U)
       (m (StateMachine Context))
       (input Nat))
    (StateMachine Context)))

(define handle-one-input
  (lambda (Context machine input)
      (ind-Either ((cdr machine) (state-id Context machine))
        (lambda (x) (StateMachine Context))
        (lambda (next-state-function)
          (cons
            (next-state-function (context Context machine) input)
            (cdr machine)))
        ;; state not found
        (lambda (r) machine))))

;; Addition, from The Little Typer 3.24 through 3.27
(claim + (-> Nat Nat Nat))
(claim step-+ (-> Nat Nat))

(define step-+
  (lambda (n)
    (add1 n)))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; Multiplication by 10
(claim *10 (-> Nat Nat))

(define *10
  (lambda (n)
    ((the (-> Nat Nat)
       (lambda (n5)
       (+ n5 n5)))
      ((the (-> Nat Nat)
         (lambda (n2)
           (+ n (+ n2 n2))))
        (+ n n)))))

(claim number-parser
  (StateMachine Nat))

(define number-parser
  (cons
    (cons 1 0)
    (make-array (TransitionFunction Nat) 1
      (vec:: (cons 1
               (lambda (prev-number next-digit)
                 (cons
                   1
                   (+ (*10 prev-number) next-digit))))
        vecnil))))

(claim handle-input
  (Pi ((Context U)
       (m (StateMachine Context))
       (n Nat)
       (input (Vec Nat n)))
    (StateMachine Context)))

(define handle-input
  (lambda (Context m n input)
    ((ind-Vec n input
       ;; continuation-passing style.  Do one iteraton
       ;; of the state machine, then pass it to the function that does the next.
       (lambda (k v) (-> (StateMachine Context) (StateMachine Context)))
       ;; Zero-length vector: return the final machine
       (lambda (final-machine) final-machine)
       ;; Process input i, then pass it to the function that
       ;; does the remaining steps.
       (lambda (k i is next-step)
         (lambda (prev-steps)
           (next-step
             (handle-one-input Context prev-steps i)))))
      m)))
          
      





