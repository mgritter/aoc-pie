#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 83 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 32
#"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 60 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1 0
1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1926 0 28 3 9 #"#lang pie"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Addition, from The Little Typer 3.24 through 3.27"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 6 #"step-+"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"step-+"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"iter-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"j"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"step-+"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Ordering"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; a is less than b if there exists"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; c such that a + (c+1) = b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 8 #"LessThan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"LessThan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; a is gte b if there exists"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; c such that a = b + c"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Every pair of numbers is related in one of those two ways."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"Comparison"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 13 #"zero-gte-zero"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"zero-gte-zero"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 5 #"right"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 4 #"same"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 17 #"zero-lessthan-b+1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"zero-lessthan-b+1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"left"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 21 3 4 #"same"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 17 #"compare-with-zero"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; compare the number b with zero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"compare-with-zero"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 7 #"ind-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 13 #"zero-gte-zero"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 17 #"zero-lessthan-b+1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 11 #"mot-compare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"mot-compare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 12 #"step-compare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mot-compare"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 11 #"mot-compare"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 16 #"step-compare-mot"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"step-compare-mot"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Convert a relation a-1 vs b-1 to one between and b"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 17 #"advance-lt-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"LessThan"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 18 #"advance-gte-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 25 #"advance-comparison-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"->"
0 0 24 3 2 #" ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"LessThan"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"LessThan"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"advance-lt-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 32 #";; if 1 + ( a-1 + c ) = b-1 then"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 21 #";;    1 + (a + c) = b"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cong"
0 0 24 3 2 #" ("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"lt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"advance-gte-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"gte"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 24 #";; if a-1 = b-1 + c then"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 15 #";;    a = b + c"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"gte"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cong"
0 0 24 3 2 #" ("
0 0 15 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"gte"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 3 #") ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"advance-comparison-by-one"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"relation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 10 #"ind-Either"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 8 #"relation"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"LessThan"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 17 #"advance-lt-by-one"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 14 3 2 #"lt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"gte"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 18 #"advance-gte-by-one"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"gte"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; comparison is a function that compares a-1 with its argument"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; convert it to a function that compares a with with its argument b"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"step-compare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 10 #"comparison"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 7 #"ind-Nat"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"LessThan"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"GreaterThanOrEqual"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 43 #";; b = 0, so a >= b, witnessed by a = a + 0"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 5 #"right"
0 0 24 3 2 #" ("
0 0 21 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 3 #") ("
0 0 21 3 4 #"same"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 59
#";; b > 0 so the answer is the same as a-1 compared with b-1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-1"
0 0 24 3 1 #" "
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 25 #"advance-comparison-by-one"
0 0 24 3 1 #" "
0 0 14 3 3 #"a-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"comparison"
0 0 24 3 1 #" "
0 0 14 3 3 #"b-1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Inductively create functions that compare a with b"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 7 #"ind-Nat"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 11 #"mot-compare"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 17 #"compare-with-zero"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 12 #"step-compare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"larger-of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"larger-of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 10 #"ind-Either"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"compa"
0 0 14 3 2 #"re"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; Trees!"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; A tree of height h has subtrees of height h-1 and some"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; value that's no more than h-1."
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; We want to store the height of each subtree, so a tree is a"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (cons h (Pair Nat (Pair <left subtree> <right subtree>)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; We can't define this recursively, but we can build a function"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; that returns tree-types of all the desired heights, up to"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; some maximum."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"EmptyLeaf"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"EmptyLeaf"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 7 #"Trivial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"U"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; A tree of height h"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; is a"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;  (Pair Nat"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;    (Pair"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;        (Sigma (("
0 0 17 3 2 #"lh"
0 0 17 3 1 #" "
0 0 17 3 20 #"Nat)) (Tree n-1 lh))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;        (Sigma ((rh nat)) (Tree n-1 rh)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; So we perform induction on n to build a function"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; that can build trees of any height."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"tree-step"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tree-step"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"n-1"
0 0 24 3 1 #" "
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"below"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"which-Nat"
0 0 24 3 1 #" "
0 0 14 3 5 #"below"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 32 #";; we can build height n = n - 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 38 #";; One of the trees must be height n-1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 2 #"rh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 64
#";; We can build height n - delta using the previous construction"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 32 #";; n - below = (n-1) - (below-1)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"below-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"construction-n-1"
0 0 24 3 1 #" "
0 0 14 3 7 #"below-1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"height"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 7 #"rec-Nat"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #" "
0 0 21 3 1 #"U"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 9 #"EmptyLeaf"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 9 #"tree-step"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"Make-Leaf"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"Make-Leaf"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"left"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 4 #"sole"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 4 #"sole"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 4 #"foo2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"foo2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"left"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Make-Leaf"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"sole"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 4 #"foo3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"foo3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 4 #"left"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"foo2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"the"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"Make-Leaf"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 17 #"comparison-to-max"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"cmp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 3 #"Nat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"comparison-to-max"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 10 #"ind-Either"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"cmp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 9 #"Make-Tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 4 #"root"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"left-subtree"
0 0 24 3 2 #" ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"right-subtree"
0 0 24 3 2 #" ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 2 #"rh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"Tree"
0 0 24 3 2 #" ("
0 0 21 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"larger-of"
0 0 24 3 2 #" ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-subtree"
0 0 24 3 3 #") ("
0 0 15 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"right-subtree"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"claim"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-tree-children"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 2 #"Pi"
0 0 24 3 3 #" (("
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"rh"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"left-subtree"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"right-subtree"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"cmp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Comparison"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-tree-children"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 1 #" "
0 0 14 3 5 #"ltree"
0 0 24 3 1 #" "
0 0 14 3 5 #"rtree"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 10 #"ind-Either"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 21 3 6 #"Either"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 21 3 4 #"Pair"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 21 3 5 #"Sigma"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 3 #"Nat"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"Tree"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 4 #"left"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"ltree"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 65
#";; FIXME: this is not the right height, we need to flip it around"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"rh"
0 0 24 3 1 #" "
0 0 14 3 5 #"rtree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 21 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 5 #"right"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 21 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"lh"
0 0 24 3 1 #" "
0 0 14 3 5 #"ltree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"rtree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 9         421 21           0 0           0 69 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"Make-Tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"root"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-subtree"
0 0 24 3 1 #" "
0 0 14 3 13 #"right-subtree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"root"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"ind-Either"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compare"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-subtree"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"right-subtree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Tree"
0 0 24 3 2 #" ("
0 0 14 3 9 #"larger-of"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-subtree"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"right-subtree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lt"
0 0 24 3 2 #") "
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"rt"
0 0 24 3 2 #") "
0 0 14 3 4 #"TODO"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"        ))))"
0           0 0           0
